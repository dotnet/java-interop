<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- Note: MUST be imported *after* $(Configuration) is set! -->
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <!-- Mono's MSBuild does not support some implicit .NET6 source generator stuff
    <TreatWarningsAsErrors Condition=" '$(Configuration)' == 'Release' And '$(MSBuildRuntimeType)' != 'Mono' ">true</TreatWarningsAsErrors> -->
    <_OutputPath>$(MSBuildThisFileDirectory)bin\Build$(Configuration)\</_OutputPath>
    <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
    <ProduceReferenceAssemblyInOutDir>true</ProduceReferenceAssemblyInOutDir>
    <DotNetTargetFrameworkVersion>7.0</DotNetTargetFrameworkVersion>
    <DotNetTargetFramework>net$(DotNetTargetFrameworkVersion)</DotNetTargetFramework>
    <!-- 
      Workaround for https://github.com/NuGet/Home/issues/6461 (VSWin Only)
      Even though we don't build NuGet packages, it still attempts to build the NuGet package name, which includes 
      the assembly version if PackageVersion isn't specified. Because our assemblies have different versions
      per-TFM, that causes a problem because the package can't have multiple versions in it.  
      Set a dummy PackageVersion because we don't actually need it.
    -->
    <PackageVersion>1.0.0.0</PackageVersion>
  </PropertyGroup>

  <Import
      Project="$(MSBuildThisFileDirectory)Configuration.Override.props"
      Condition="Exists('$(MSBuildThisFileDirectory)Configuration.Override.props')"
  />
  <Import
      Project="$([System.IO.Path]::GetDirectoryName($(MSBuildThisFileDirectory))).override.props"
      Condition=" Exists('$([System.IO.Path]::GetDirectoryName($(MSBuildThisFileDirectory))).override.props') "
  />
  <Import
      Project="$(MSBuildThisFileDirectory)bin\Build$(Configuration)\Version.props"
      Condition=" Exists('$(MSBuildThisFileDirectory)bin\Build$(Configuration)\Version.props') "
  />
  <Import
      Project="$(_OutputPath)JdkInfo.props"
      Condition="Exists('$(_OutputPath)JdkInfo.props')"
  />
  <Import
      Project="$(_OutputPath)JdkInfo-11.props"
      Condition="Exists('$(_OutputPath)JdkInfo-11.props')"
  />
  <Import
      Project="$(_OutputPath)MonoInfo.props"
      Condition="Exists('$(_OutputPath)MonoInfo.props')"
  />
  <Import
      Project="$(_OutputPath)PackagePaths.props"
      Condition="Exists('$(_OutputPath)PackagePaths.props')"
  />
  <PropertyGroup>
    <!-- Workaround: https://github.com/dotnet/sdk/issues/19050 -->
    <DisableImplicitNamespaceImports>true</DisableImplicitNamespaceImports>
    <!-- Workaround: https://github.com/dotnet/runtime/issues/55992 -->
    <UseAppHost>False</UseAppHost>
    <AppendTargetFrameworkToOutputPath Condition=" '$(AppendTargetFrameworkToOutputPath)' == '' ">False</AppendTargetFrameworkToOutputPath>
    <BaseIntermediateOutputPath Condition=" '$(BaseIntermediateOutputPath)' == '' ">obj\</BaseIntermediateOutputPath>
  </PropertyGroup>

  <PropertyGroup>
    <XamarinAndroidToolsDirectory   Condition=" '$(XamarinAndroidToolsDirectory)' == '' ">$(MSBuildThisFileDirectory)external\xamarin-android-tools</XamarinAndroidToolsDirectory>
  </PropertyGroup>
  <PropertyGroup>
    <DotnetToolPath Condition=" '$(DotnetToolPath)' == '' ">dotnet</DotnetToolPath>
    <CmakePath Condition=" '$(CmakePath)' == '' ">cmake</CmakePath>
    <GradleHome Condition=" '$(GradleHome)' == '' ">$(MSBuildThisFileDirectory)build-tools\gradle</GradleHome>
    <GradleWPath Condition=" '$(GradleWPath)' == '' ">$(GradleHome)\gradlew</GradleWPath>
    <GradleArgs Condition=" '$(GradleArgs)' == '' ">--stacktrace --no-daemon</GradleArgs>
    <JavacSourceVersion Condition=" '$(JavacSourceVersion)' == '' ">1.8</JavacSourceVersion>
    <JavacTargetVersion Condition=" '$(JavacTargetVersion)' == '' ">1.8</JavacTargetVersion>
    <_BootClassPath Condition=" '$(JreRtJarPath)' != '' ">-bootclasspath "$(JreRtJarPath)"</_BootClassPath>
    <_JavacSourceOptions>-source $(JavacSourceVersion) -target $(JavacTargetVersion) $(_BootClassPath)</_JavacSourceOptions>
  </PropertyGroup>
  <PropertyGroup>
    <XamarinAndroidToolsFullPath>$([System.IO.Path]::GetFullPath ('$(XamarinAndroidToolsDirectory)'))</XamarinAndroidToolsFullPath>
  </PropertyGroup>

  <!--
    When building on a bot w/ VS2019:

      warning CS8032: An instance of analyzer System.Text.Json.SourceGeneration.JsonSourceGenerator cannot be created from

    however, with `$(TreatWarningsAsErrors)`=True, this becomes an error,
    meaning we can't build on VS2019.

    Ignore CS8032 so that we can build on VS2019.
    
    JniEnvironment.g.cs(34,8): error CS8981: The type name 'jobject' only contains lower-cased ascii characters. Such names may become reserved for the language.
    -->
  <PropertyGroup>
    <NoWarn>$(NoWarn);CS8032;CS8981</NoWarn>
  </PropertyGroup>

</Project>
