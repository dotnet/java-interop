# Java.Interop Pipelines

trigger:
  - main
  - release/*
  - d17-*

pr:
  branches:
    include:
    - main
    - release/*
    - d17-*
  paths:
    exclude:
    - README.md
    - Documentation/*

parameters:
- name: ApiScanSourceBranch
  default: 'refs/heads/main'

# Global variables
variables:
  RunningOnCI: true
  Build.Configuration: Release
  DotNetCoreVersion: 8.x
  DotNetTargetFramework: net8.0
  NetCoreTargetFrameworkPathSuffix: -$(DotNetTargetFramework)
  1ESWindowsPool: AzurePipelines-EO
  1ESWindowsImage: AzurePipelinesWindows2022compliant
  1ESMacPool: Azure Pipelines
  1ESMacImage: internal-macos-11
  DisablePipelineConfigDetector: true

jobs:
- job: windows_dotnet_build
  displayName: Windows - .NET
  pool:
    name: $(1ESWindowsPool)
    demands: 
    - ImageOverride -equals $(1ESWindowsImage)
  variables:
    VSINSTALLDIR: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\
    Codeql.Enabled: true
  timeoutInMinutes: 60
  workspace:
    clean: all
  steps:
  - checkout: self
    submodules: recursive

  - template: templates\install-dependencies.yaml

  - template: templates\core-build.yaml

  - template: templates\core-tests.yaml
    parameters:
      runNativeDotnetTests: true
      nativeAotRid: win-x64
      platformName: .NET - Windows

  - template: templates\fail-on-issue.yaml

  - task: PublishPipelineArtifact@1
    displayName: Publish build artifacts
    inputs:
      artifactName: artifacts
      targetPath: bin
    condition: succeededOrFailed()

- job: mac_dotnet_build
  displayName: Mac - .NET
  pool:
    name: $(1ESMacPool)
    vmImage: $(1ESMacImage)
  timeoutInMinutes: 20
  workspace:
    clean: all
  steps:
  - checkout: self
    submodules: recursive

  - template: templates\install-dependencies.yaml

  - template: templates\core-build.yaml

  - template: templates\core-tests.yaml
    parameters:
      runNativeTests: true
      nativeAotRid: osx-x64
      platformName: .NET - MacOS

  - template: templates\fail-on-issue.yaml


- job: api_scan
  displayName: API Scan
  dependsOn: windows_dotnet_build
  condition: and(eq(dependencies.windows_dotnet_build.result, 'Succeeded'), eq(variables['Build.SourceBranch'], '${{ parameters.ApiScanSourceBranch }}'))
  pool:
    name: Azure Pipelines
    vmImage: windows-2022
  timeoutInMinutes: 480
  workspace:
    clean: all
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: Download build artifacts
    inputs:
      artifactName: artifacts
      downloadPath: $(Build.SourcesDirectory)

    ### Copy .dll, .exe, .pdb files for APIScan
  - task: CopyFiles@2
    displayName: Collect Files for APIScan
    inputs:
      Contents: |
        $(Build.SourcesDirectory)\$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)\**\?(*.dll|*.exe|*.pdb)
        !$(Build.SourcesDirectory)\**\jnimarshalmethod-gen.*
        !$(Build.SourcesDirectory)\**\Mono.CSharp.dll
        !$(Build.SourcesDirectory)\**\SgmlReader.exe
        !$(Build.SourcesDirectory)\**\win-*\java-interop.dll
      TargetFolder: $(Build.StagingDirectory)\apiscan
      OverWrite: true
      flattenFolders: true

  - task: APIScan@2
    displayName: Run APIScan
    inputs:
      softwareFolder: $(Build.StagingDirectory)\apiscan
      symbolsFolder: 'SRV*http://symweb;$(Build.StagingDirectory)\apiscan'
      softwareName: $(ApiScanName)
      softwareVersionNum: $(Build.SourceBranchName)-$(Build.SourceVersion)$(System.JobAttempt)
      isLargeApp: true
      toolVersion: Latest
    env:
      AzureServicesAuthConnectionString: runAs=App;AppId=$(ApiScanClientId);TenantId=$(ApiScanTenant);AppKey=$(ApiScanSecret)

  - task: SdtReport@2
    displayName: Guardian Export - Security Report
    inputs:
      GdnExportAllTools: false
      GdnExportGdnToolApiScan: true
      GdnExportOutputSuppressionFile: source.gdnsuppress

  - task: PublishSecurityAnalysisLogs@3
    displayName: Publish Guardian Artifacts
    inputs:
      ArtifactName: APIScan Logs
      ArtifactType: Container
      AllTools: false
      APIScan: true
      ToolLogsNotFoundAction: Warning

  - task: PostAnalysis@2
    displayName: Fail Build on Guardian Issues
    inputs:
      GdnBreakAllTools: false
      GdnBreakGdnToolApiScan: true


- job: OneLocBuild
  displayName: OneLocBuild
  condition: and(eq(variables['System.TeamProject'], 'DevDiv'), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  pool: VSEngSS-MicroBuild2022-1ES
  timeoutInMinutes: 30
  variables:
  - group: Xamarin-Secrets
  workspace:
    clean: all
  steps:
  - checkout: self
    clean: true

  - task: OneLocBuild@2
    displayName: OneLocBuild
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
    inputs:
      locProj: Localize/LocProject.json
      outDir: $(Build.StagingDirectory)
      packageSourceAuth: patAuth
      patVariable: $(OneLocBuild--PAT)
      isCreatePrSelected: true
      repoType: gitHub
      gitHubPatVariable: $(github--pat--vs-mobiletools-engineering-service2)
      prSourceBranchPrefix: locpr
      isShouldReusePrSelected: true
      isAutoCompletePrSelected: false
      isUseLfLineEndingsSelected: true

  - task: PublishBuildArtifacts@1
    displayName: Publish Localization Files
    inputs:
      PathtoPublish: $(Build.StagingDirectory)/loc
      ArtifactName: Loc
    condition: succeededOrFailed()
