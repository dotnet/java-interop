# Java.Interop Pipelines

trigger:
  - main
  - d16-*

pr:
  branches:
    include:
    - main
    - d16-*
  paths:
    exclude:
    - README.md
    - Documentation/*

# Global variables
variables:
  RunningOnCI: true
  Build.Configuration: Release
  MaxJdkVersion: 8
  DotNetCoreVersion: 6.0.x
  HostedMacImage: macOS-10.15
  HostedWinVS2019: Hosted Windows 2019 with VS2019
  NetCoreTargetFrameworkPathSuffix: -net6.0
  VSInstallRoot: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise

jobs:
- job: windows_build
  displayName: Windows - .NET Framework
  pool: $(HostedWinVS2019)
  timeoutInMinutes: 20
  workspace:
    clean: all
  steps:
  - checkout: self
    submodules: recursive

  - template: templates\install-dependencies.yaml

  - task: MSBuild@1
    displayName: MSBuild Java.Interop.sln /t:Restore
    inputs:
      solution: Java.Interop.sln
      configuration: $(Build.Configuration)
      msbuildArguments: /t:Restore /p:RestoreConfigFile=$(System.DefaultWorkingDirectory)\external\xamarin-android-tools\NuGet.config

  - task: MSBuild@1
    displayName: MSBuild Java.Interop.sln /t:Prepare
    inputs:
      solution: Java.Interop.sln
      configuration: $(Build.Configuration)
      msbuildArguments: /restore /t:Prepare

  - task: MSBuild@1
    displayName: MSBuild Java.Interop.sln
    inputs:
      solution: Java.Interop.sln
      configuration: $(Build.Configuration)
      msbuildArguments: /restore
    
  - task: MSBuild@1
    displayName: MSBuild RunNUnitTests.targets
    inputs:
      solution: build-tools/scripts/RunNUnitTests.targets
      configuration: $(Build.Configuration)
      msbuildArguments: /p:TestAssembly="bin\Test$(Build.Configuration)\generator-Tests.dll;bin\Test$(Build.Configuration)\Java.Interop.Tools.JavaCallableWrappers-Tests.dll;bin\Test$(Build.Configuration)\logcat-parse-Tests.dll;bin\Test$(Build.Configuration)\Xamarin.Android.Tools.ApiXmlAdjuster-Tests.dll;bin\Test$(Build.Configuration)\Xamarin.Android.Tools.Bytecode-Tests.dll;bin\Test$(Build.Configuration)\Java.Interop.Tools.Generator-Tests.dll;bin\Test$(Build.Configuration)\Xamarin.SourceWriter-Tests.dll"
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: TestResult-*.xml
    condition: succeededOrFailed()

- job: windows_dotnet_build
  displayName: Windows - .NET Core
  pool: $(HostedWinVS2019)
  timeoutInMinutes: 20
  workspace:
    clean: all
  steps:
  - checkout: self
    submodules: recursive

  - template: templates\install-dependencies.yaml

  - template: templates\core-build.yaml

  - template: templates\core-tests.yaml
    parameters:
      runNativeDotnetTests: true

  - template: templates\fail-on-issue.yaml
    
- job: mac_build
  displayName: Mac - Mono
  pool:
    vmImage: $(HostedMacImage)
  timeoutInMinutes: 20
  workspace:
    clean: all
  steps:
  - checkout: self
    submodules: recursive

  - template: templates\install-dependencies.yaml

  - script: >
      dotnet tool install --global boots &&
      boots https://download.mono-project.com/archive/6.12.0/macos-10-universal/MonoFramework-MDK-6.12.0.145.macos10.xamarin.universal.pkg
    displayName: Install Mono

  - script: make prepare CONFIGURATION=$(Build.Configuration) JI_MAX_JDK=$(MaxJdkVersion)
    displayName: make prepare
    
  - script: make all CONFIGURATION=$(Build.Configuration) JI_MAX_JDK=$(MaxJdkVersion)
    displayName: make all
    
  - script: |
      r=0
      make run-all-tests CONFIGURATION=$(Build.Configuration) JI_MAX_JDK=$(MaxJdkVersion) || r=$?
      jar cf xatb.jar -C tests/Xamarin.Android.Tools.Bytecode-Tests/obj/*/classes .
      zip -r bin.zip bin
      exit $r
    displayName: Run Tests

  - task: PublishTestResults@2
    displayName: Publish Test Results
    inputs:
      testResultsFormat: NUnit
      testResultsFiles: TestResult-*.xml
    condition: succeededOrFailed()

  - task: CopyFiles@2
    displayName: 'Copy Files to: Artifact Staging Directory'
    inputs:
      SourceFolder: $(System.DefaultWorkingDirectory)
      Contents: |
        xatb.jar
        bin.zip 
      TargetFolder: $(Build.ArtifactStagingDirectory)
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: debug'
    inputs:
      ArtifactName: debug
    condition: succeededOrFailed()
    
- job: mac_dotnet_build
  displayName: Mac - .NET Core
  pool:
    vmImage: $(HostedMacImage)
  timeoutInMinutes: 20
  workspace:
    clean: all
  steps:
  - checkout: self
    submodules: recursive

  - template: templates\install-dependencies.yaml
    
  - script: make prepare-core CONFIGURATION=$(Build.Configuration) JI_MAX_JDK=$(MaxJdkVersion)
    displayName: make prepare-core
      
  - template: templates\core-build.yaml
      
  - template: templates\core-tests.yaml
    parameters:
      runNativeTests: true

  - template: templates\fail-on-issue.yaml
