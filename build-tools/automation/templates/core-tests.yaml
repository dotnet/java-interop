parameters:
  condition: succeeded()
  runNativeTests: false
  platformName:

steps:
- task: DotNetCoreCLI@2
  displayName: 'Tests: generator'
  inputs:
    command: test
    testRunTitle: generator (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/generator-Tests.dll
  continueOnError: true
  
- task: DotNetCoreCLI@2
  displayName: 'Tests: JavaCallableWrappers'
  inputs:
    command: test
    testRunTitle: Java.Interop.Tools.JavaCallableWrappers (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop.Tools.JavaCallableWrappers-Tests.dll
  continueOnError: true
   
- task: DotNetCoreCLI@2
  displayName: 'Tests: logcat-parse'
  inputs:
    command: test
    testRunTitle: logcat-parse (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/logcat-parse-Tests.dll
  continueOnError: true
  
- task: DotNetCoreCLI@2
  displayName: 'Tests: ApiXmlAdjuster'
  inputs:
    command: test
    testRunTitle: Xamarin.Android.Tools.ApiXmlAdjuster (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Xamarin.Android.Tools.ApiXmlAdjuster-Tests.dll
  continueOnError: true
  
- task: DotNetCoreCLI@2
  displayName: 'Tests: JavaTypeSystem'
  inputs:
    command: test
    testRunTitle: Xamarin.Android.Tools.JavaTypeSystem (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop.Tools.JavaTypeSystem-Tests.dll
  continueOnError: true
  
- task: DotNetCoreCLI@2
  displayName: 'Tests: Bytecode'
  inputs:
    command: test
    testRunTitle: Xamarin.Android.Tools.Bytecode (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Xamarin.Android.Tools.Bytecode-Tests.dll
  continueOnError: true

- task: DotNetCoreCLI@2
  displayName: 'Tests: Java.Interop.Tools.Generator'
  inputs:
    command: test
    testRunTitle: Java.Interop.Tools.Generator (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop.Tools.Generator-Tests.dll
  continueOnError: true

- task: DotNetCoreCLI@2
  displayName: 'Tests: Java.Interop.Tools.JavaSource'
  inputs:
    command: test
    testRunTitle: Java.Interop.Tools.JavaSource (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop.Tools.JavaSource-Tests.dll
  continueOnError: true

- task: DotNetCoreCLI@2
  displayName: 'Tests: Xamarin.SourceWriter'
  inputs:
    command: test
    testRunTitle: Xamarin.SourceWriter (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Xamarin.SourceWriter-Tests.dll
  continueOnError: true

- task: DotNetCoreCLI@2
  displayName: 'Tests: Java.Interop'
  condition: or(eq('${{ parameters.runNativeDotnetTests }}', 'true'), eq('${{ parameters.runNativeTests }}', 'true'))
  inputs:
    command: test
    testRunTitle: Java.Interop ($(DotNetTargetFramework) - ${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop-Tests.dll
  continueOnError: true
  retryCountOnTaskFailure: 1

- task: DotNetCoreCLI@2
  displayName: 'Tests: Java.Interop.Dynamic'
  condition: eq('${{ parameters.runNativeTests }}', 'true')
  inputs:
    command: test
    testRunTitle: Java.Interop.Dynamic (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop.Dynamic-Tests.dll
  continueOnError: true
  retryCountOnTaskFailure: 1

- task: DotNetCoreCLI@2
  displayName: 'Tests: Java.Interop.Export'
  condition: or(eq('${{ parameters.runNativeDotnetTests }}', 'true'), eq('${{ parameters.runNativeTests }}', 'true'))
  inputs:
    command: test
    testRunTitle: Java.Interop.Export (${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop.Export-Tests.dll
  continueOnError: true
  retryCountOnTaskFailure: 1

- task: DotNetCoreCLI@2
  displayName: 'jnimarshalmethod-gen Java.Interop.Export-Tests.dll'
  condition: or(eq('${{ parameters.runNativeDotnetTests }}', 'true'), eq('${{ parameters.runNativeTests }}', 'true'))
  inputs:
    command: custom
    custom: bin/$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/jnimarshalmethod-gen.dll
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop.Export-Tests.dll -v -v --keeptemp -o bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)
  continueOnError: true
  retryCountOnTaskFailure: 1

- task: DotNetCoreCLI@2
  displayName: 'Tests: Java.Interop.Export w/ jnimarshalmethod-gen!'
  condition: or(eq('${{ parameters.runNativeDotnetTests }}', 'true'), eq('${{ parameters.runNativeTests }}', 'true'))
  inputs:
    command: test
    testRunTitle: Java.Interop.Export (jnimarshalmethod-gen + ${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop.Export-Tests.dll
  continueOnError: true
  retryCountOnTaskFailure: 1

- task: DotNetCoreCLI@2
  displayName: 'Tests: Java.Interop-Performance-$(DotNetTargetFramework)'
  condition: eq('${{ parameters.runNativeTests }}', 'true')
  inputs:
    command: test
    testRunTitle: Java.Interop-Performance ($(DotNetTargetFramework) - ${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Interop-PerformanceTests.dll
  continueOnError: true
  retryCountOnTaskFailure: 1

- task: DotNetCoreCLI@2
  displayName: 'Tests: Java.Base'
  condition: or(eq('${{ parameters.runNativeDotnetTests }}', 'true'), eq('${{ parameters.runNativeTests }}', 'true'))
  inputs:
    command: test
    testRunTitle: Java.Base ($(DotNetTargetFramework) - ${{ parameters.platformName }})
    arguments: bin/Test$(Build.Configuration)$(NetCoreTargetFrameworkPathSuffix)/Java.Base-Tests.dll
  continueOnError: true
  retryCountOnTaskFailure: 1

- task: DotNetCoreCLI@2
  displayName: 'Tests: java-source-utils'
  inputs:
    command: build
    arguments: -c $(Build.Configuration) tools/java-source-utils/java-source-utils.csproj -t:RunTests
  continueOnError: true

- task: PublishTestResults@2
  displayName: Publish JUnit Test Results
  inputs:
    testResultsFormat: JUnit
    testResultsFiles: 'tools/java-source-utils/build/test-results/**/TEST-*.xml'
    testRunTitle: java-source-utils (${{ parameters.platformName }})
  continueOnError: true
