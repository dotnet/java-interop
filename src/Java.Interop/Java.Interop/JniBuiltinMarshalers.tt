<#@ template  language="C#" #>
<#@ assembly  name="System.Core" #>
<#@ import    namespace="System.Collections.Generic" #>
<#@ import    namespace="System.Linq" #>
<#@ import    namespace="System.Text" #>
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq.Expressions;
using System.Reflection;

using Java.Interop.Expressions;

namespace Java.Interop {
<#
	var types = new[]{
		new { Name = "Boolean",     Type = "Boolean",   JniCallType = "Boolean",    JniType = "Z",  GetValue = "booleanValue" },
		new { Name = "Byte",        Type = "SByte",     JniCallType = "Byte",       JniType = "B",  GetValue = "byteValue" },
		new { Name = "Character",   Type = "Char",      JniCallType = "Char",       JniType = "C",  GetValue = "charValue" },
		new { Name = "Short",       Type = "Int16",     JniCallType = "Short",      JniType = "S",  GetValue = "shortValue" },
		new { Name = "Integer",     Type = "Int32",     JniCallType = "Int",        JniType = "I",  GetValue = "intValue" },
		new { Name = "Long",        Type = "Int64",     JniCallType = "Long",       JniType = "J",  GetValue = "longValue" },
		new { Name = "Float",       Type = "Single",    JniCallType = "Float",      JniType = "F",  GetValue = "floatValue" },
		new { Name = "Double",      Type = "Double",    JniCallType = "Double",     JniType = "D",  GetValue = "doubleValue" },
	};
#>

	partial class JniRuntime {

		static readonly Lazy<KeyValuePair<Type, JniTypeSignature>[]> JniBuiltinTypeNameMappings = new Lazy<KeyValuePair<Type, JniTypeSignature>[]> (InitJniBuiltinTypeNameMappings);

		static KeyValuePair<Type, JniTypeSignature>[] InitJniBuiltinTypeNameMappings ()
		{
			return new []{
				new KeyValuePair<Type, JniTypeSignature>(typeof (string),    new JniTypeSignature ("java/lang/String")),

				new KeyValuePair<Type, JniTypeSignature>(typeof (void),      new JniTypeSignature ("V", arrayRank: 0, keyword: true)),
				new KeyValuePair<Type, JniTypeSignature>(typeof (void),      new JniTypeSignature ("java/lang/Void")),

<#
	foreach (var type in types) {
#>
				new KeyValuePair<Type, JniTypeSignature>(typeof (<#= type.Type #>),     new JniTypeSignature ("<#= type.JniType #>", 0, keyword: true)),
				new KeyValuePair<Type, JniTypeSignature>(typeof (<#= type.Type #>?),    new JniTypeSignature ("java/lang/<#= type.Name #>")),
<#
	}
#>
			};
		}

		static readonly Lazy<KeyValuePair<Type, JniValueMarshaler>[]> JniBuiltinMarshalers = new Lazy<KeyValuePair<Type, JniValueMarshaler>[]> (InitJniBuiltinMarshalers);

		static KeyValuePair<Type, JniValueMarshaler>[] InitJniBuiltinMarshalers ()
		{
			return new []{
				new KeyValuePair<Type, JniValueMarshaler>(typeof (string), JniStringValueMarshaler.Instance),
<#
	foreach (var type in types) {
#>
				new KeyValuePair<Type, JniValueMarshaler>(typeof (<#= type.Type #>),   Jni<#= type.Type #>ValueMarshaler.Instance),
				new KeyValuePair<Type, JniValueMarshaler>(typeof (<#= type.Type #>?),  JniNullable<#= type.Type #>ValueMarshaler.Instance),
<#
	}
#>
			};
		}
	}
<#
	foreach (var type in types) {
#>

	static class Jni<#= type.Name #> {
		internal    const   string  JniTypeName = "java/lang/<#= type.Name #>";

		static JniType _TypeRef;
		static JniType TypeRef {
			get {return JniType.GetCachedJniType (ref _TypeRef, JniTypeName);}
		}

		static JniMethodInfo init;
		internal static unsafe JniObjectReference CreateLocalRef (<#= type.Type #> value)
		{
			var args    = stackalloc JniArgumentValue [1];
			args [0]    = new JniArgumentValue (value);

			TypeRef.GetCachedConstructor (ref init, "(<#= type.JniType #>)V");
			return TypeRef.NewObject (init, args);
		}

		static JniMethodInfo <#= type.GetValue #>;
		internal static <#= type.Type #> GetValueFromJni (ref JniObjectReference self, JniObjectReferenceOptions transfer, Type targetType)
		{
			Debug.Assert (targetType == null || targetType == typeof (<#= type.Type #>), "Expected targetType==typeof(<#= type.Type #>); was: " + targetType);
			TypeRef.GetCachedInstanceMethod (ref <#= type.GetValue #>, "<#= type.GetValue #>", "()<#= type.JniType #>");
			try {
				return JniEnvironment.InstanceMethods.Call<#= type.JniCallType #>Method (self, <#= type.GetValue #>);
			} finally {
				JniObjectReference.Dispose (ref self, transfer);
			}
		}
	}

	sealed class Jni<#= type.Type #>ValueMarshaler : JniValueMarshaler<<#= type.Type #>> {

		internal    static  readonly    Jni<#= type.Type #>ValueMarshaler   Instance    = new Jni<#= type.Type #>ValueMarshaler ();

		public override bool IsJniValueType {
			get {return true;}
		}

		public override Type MarshalType {
		    get {return typeof (<#= type.Type #>);}
		}

		public override object CreateValue (ref JniObjectReference reference, JniObjectReferenceOptions options, Type targetType)
		{
			if (!reference.IsValid)
				return null;
			return CreateGenericValue (ref reference, options, targetType);
		}

		public override <#= type.Type #> CreateGenericValue (ref JniObjectReference reference, JniObjectReferenceOptions options, Type targetType)
		{
			if (!reference.IsValid)
				return default (<#= type.Type #>);

			return Jni<#= type.Name #>.GetValueFromJni (ref reference, options, targetType);
		}

		public override JniValueMarshalerState CreateGenericArgumentState (<#= type.Type #> value, ParameterAttributes synchronize = ParameterAttributes.In)
		{
			return new JniValueMarshalerState (new JniArgumentValue (value));
		}

		public override JniValueMarshalerState CreateGenericObjectReferenceArgumentState (<#= type.Type #> value, ParameterAttributes synchronize)
		{
			var r = Jni<#= type.Name #>.CreateLocalRef (value);
			return new JniValueMarshalerState (r);
		}

		public override void DestroyArgumentState (object value, ref JniValueMarshalerState state, ParameterAttributes synchronize)
		{
			var r   = state.ReferenceValue;
			JniObjectReference.Dispose (ref r);
			state   = new JniValueMarshalerState ();
		}

		public override void DestroyGenericArgumentState (<#= type.Type #> value, ref JniValueMarshalerState state, ParameterAttributes synchronize)
		{
			var r   = state.ReferenceValue;
			JniObjectReference.Dispose (ref r);
			state   = new JniValueMarshalerState ();
		}

		public override Expression CreateParameterToManagedExpression (JniValueMarshalerContext context, ParameterExpression sourceValue, ParameterAttributes synchronize, Type targetType)
		{
		    return sourceValue;
		}

		public override Expression CreateParameterFromManagedExpression (JniValueMarshalerContext context, ParameterExpression sourceValue, ParameterAttributes synchronize)
		{
			return sourceValue;
		}

		public override Expression CreateReturnValueFromManagedExpression (JniValueMarshalerContext context, ParameterExpression sourceValue)
		{
			return sourceValue;
		}
	}

	sealed class JniNullable<#= type.Type #>ValueMarshaler : JniValueMarshaler<<#= type.Type #>?> {

		internal    static  readonly    JniNullable<#= type.Type #>ValueMarshaler   Instance    = new JniNullable<#= type.Type #>ValueMarshaler ();

		public override <#= type.Type #>? CreateGenericValue (ref JniObjectReference reference, JniObjectReferenceOptions options, Type targetType)
		{
			if (!reference.IsValid)
				return null;

			return Jni<#= type.Name #>.GetValueFromJni (ref reference, options, targetType: null);
		}

		public override JniValueMarshalerState CreateGenericObjectReferenceArgumentState (<#= type.Type #>? value, ParameterAttributes synchronize)
		{
		    if (!value.HasValue)
		        return new JniValueMarshalerState ();
			var r = Jni<#= type.Name #>.CreateLocalRef (value.Value);
			return new JniValueMarshalerState (r);
		}

		public override void DestroyGenericArgumentState (<#= type.Type #>? value, ref JniValueMarshalerState state, ParameterAttributes synchronize)
		{
			var r   = state.ReferenceValue;
			JniObjectReference.Dispose (ref r);
			state   = new JniValueMarshalerState ();
		}
	}
<#
	}
#>
}
