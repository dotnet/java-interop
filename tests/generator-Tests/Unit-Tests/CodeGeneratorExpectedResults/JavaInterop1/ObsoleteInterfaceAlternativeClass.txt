[Register ("com/xamarin/android/Parent", DoNotGenerateAcw=true)]
[global::System.Obsolete ("Use the 'Com.Xamarin.Android.IParent' type. This class will be removed in a future release.")]
public abstract class Parent : Java.Lang.Object {
	internal Parent ()
	{
	}

	// Metadata.xml XPath field reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/field[@name='ACCEPT_HANDOVER']"
	[Register ("ACCEPT_HANDOVER")]
	[Obsolete ("Use 'Com.Xamarin.Android.IParent.AcceptHandover'. This class will be removed in a future release.")]
	public const string AcceptHandover = (string) "android.permission.ACCEPT_HANDOVER";

	// Metadata.xml XPath field reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/field[@name='ALREADY_OBSOLETE']"
	[Register ("ALREADY_OBSOLETE")]
	[Obsolete ("deprecated")]
	public const string AlreadyObsolete = (string) "android.permission.ACCEPT_HANDOVER";


	// Metadata.xml XPath field reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/field[@name='API_NAME']"
	[Register ("API_NAME")]
	[Obsolete ("Use 'Com.Xamarin.Android.IParent.ApiName'. This class will be removed in a future release.")]
	public static string ApiName {
		get {
			const string __id = "API_NAME.Ljava/lang/String;";

			var __v = _members.StaticFields.GetObjectValue (__id);
			return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
		}
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/method[@name='comparing' and count(parameter)=0]"
	[Obsolete (@"Use 'Com.Xamarin.Android.IParent.Comparing'. This class will be removed in a future release.")]
	[Register ("comparing", "()I", "")]
	public static unsafe int Comparing ()
	{
		const string __id = "comparing.()I";
		try {
			var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
			return __rm;
		} finally {
		}
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/method[@name='comparingOld' and count(parameter)=0]"
	[Obsolete (@"deprecated")]
	[Register ("comparingOld", "()I", "")]
	public static unsafe int ComparingOld ()
	{
		const string __id = "comparingOld.()I";
		try {
			var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
			return __rm;
		} finally {
		}
	}

	static readonly JniPeerMembers _members = new JniPeerMembers ("com/xamarin/android/Parent", typeof (Parent));

}

// Metadata.xml XPath interface reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']"
[Register ("com/xamarin/android/Parent", "", "Com.Xamarin.Android.IParentInvoker")]
public partial interface IParent : IJavaObject, IJavaPeerable {
	private static readonly JniPeerMembers _members = new JniPeerMembers ("com/xamarin/android/Parent", typeof (IParent), isInterface: true);

	// Metadata.xml XPath field reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/field[@name='ACCEPT_HANDOVER']"
	[Register ("ACCEPT_HANDOVER")]
	public const string AcceptHandover = (string) "android.permission.ACCEPT_HANDOVER";

	// Metadata.xml XPath field reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/field[@name='ALREADY_OBSOLETE']"
	[Register ("ALREADY_OBSOLETE")]
	[Obsolete ("deprecated")]
	public const string AlreadyObsolete = (string) "android.permission.ACCEPT_HANDOVER";

	// Metadata.xml XPath method reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/method[@name='comparing' and count(parameter)=0]"
	[Register ("comparing", "()I", "")]
	public static unsafe int Comparing ()
	{
		const string __id = "comparing.()I";
		try {
			var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
			return __rm;
		} finally {
		}
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/method[@name='comparingOld' and count(parameter)=0]"
	[Obsolete (@"deprecated")]
	[Register ("comparingOld", "()I", "")]
	public static unsafe int ComparingOld ()
	{
		const string __id = "comparingOld.()I";
		try {
			var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
			return __rm;
		} finally {
		}
	}

}

[global::Android.Runtime.Register ("com/xamarin/android/Parent", DoNotGenerateAcw=true)]
internal partial class IParentInvoker : global::Java.Lang.Object, IParent {
	static readonly JniPeerMembers _members = new JniPeerMembers ("com/xamarin/android/Parent", typeof (IParentInvoker));

	static IntPtr java_class_ref {
		get { return _members.JniPeerType.PeerReference.Handle; }
	}

	public override global::Java.Interop.JniPeerMembers JniPeerMembers {
		get { return _members; }
	}

	protected override IntPtr ThresholdClass {
		get { return class_ref; }
	}

	protected override global::System.Type ThresholdType {
		get { return _members.ManagedPeerType; }
	}

	new IntPtr class_ref;

	public static IParent GetObject (IntPtr handle, JniHandleOwnership transfer)
	{
		return global::Java.Lang.Object.GetObject<IParent> (handle, transfer);
	}

	static IntPtr Validate (IntPtr handle)
	{
		if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
			throw new InvalidCastException (string.Format ("Unable to convert instance of type '{0}' to type '{1}'.", JNIEnv.GetClassNameFromInstance (handle), "com.xamarin.android.Parent"));
		return handle;
	}

	protected override void Dispose (bool disposing)
	{
		if (this.class_ref != IntPtr.Zero)
			JNIEnv.DeleteGlobalRef (this.class_ref);
		this.class_ref = IntPtr.Zero;
		base.Dispose (disposing);
	}

	public IParentInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
	{
		IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
		this.class_ref = JNIEnv.NewGlobalRef (local_ref);
		JNIEnv.DeleteLocalRef (local_ref);
	}

}
