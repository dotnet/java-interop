// Metadata.xml XPath class reference: path="/api/package[@name='java.code']/class[@name='MyClass']"
[global::Java.Interop.JniTypeSignature ("java/code/MyClass", GenerateJavaPeer=false)]
public partial class MyClass {
	static readonly JniPeerMembers _members = new JniPeerMembers ("java/code/MyClass", typeof (MyClass));

	protected MyClass (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
	{
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='Echo' and count(parameter)=1 and parameter[1][@type='uint']]"
	[global::Java.Interop.JniMethodSignature ("Echo", "(I)I")]
	public unsafe uint Echo (uint value)
	{
		const string __id = "Echo.(I)I";
		try {
			JniArgumentValue* __args = stackalloc JniArgumentValue [1];
			__args [0] = new JniArgumentValue (value);
			var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
			return (uint)__rm;
		} finally {
		}
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='Echo' and count(parameter)=1 and parameter[1][@type='ushort']]"
	[global::Java.Interop.JniMethodSignature ("Echo", "(S)S")]
	public unsafe ushort Echo (ushort value)
	{
		const string __id = "Echo.(S)S";
		try {
			JniArgumentValue* __args = stackalloc JniArgumentValue [1];
			__args [0] = new JniArgumentValue (value);
			var __rm = _members.InstanceMethods.InvokeAbstractInt16Method (__id, this, __args);
			return (ushort)__rm;
		} finally {
		}
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='Echo' and count(parameter)=1 and parameter[1][@type='ulong']]"
	[global::Java.Interop.JniMethodSignature ("Echo", "(J)J")]
	public unsafe ulong Echo (ulong value)
	{
		const string __id = "Echo.(J)J";
		try {
			JniArgumentValue* __args = stackalloc JniArgumentValue [1];
			__args [0] = new JniArgumentValue (value);
			var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
			return (ulong)__rm;
		} finally {
		}
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='Echo' and count(parameter)=1 and parameter[1][@type='ubyte']]"
	[global::Java.Interop.JniMethodSignature ("Echo", "(B)B")]
	public unsafe byte Echo (byte value)
	{
		const string __id = "Echo.(B)B";
		try {
			JniArgumentValue* __args = stackalloc JniArgumentValue [1];
			__args [0] = new JniArgumentValue (value);
			var __rm = _members.InstanceMethods.InvokeAbstractSByteMethod (__id, this, __args);
			return (byte)__rm;
		} finally {
		}
	}

}
