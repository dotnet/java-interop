protected MyClass (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer) {}

// Metadata.xml XPath constructor reference: path="/api/package[@name='java.code']/class[@name='MyClass']/constructor[@name='MyClass' and count(parameter)=0]"
[Register (".ctor", "()V", "")]
 unsafe MyClass ()
	: base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
{
	const string __id = "()V";

	if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
		return;

	try {
		var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
		SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
		_members.InstanceMethods.FinishCreateInstance (__id, this, null);
	} finally {
	}
}

// Metadata.xml XPath constructor reference: path="/api/package[@name='java.code']/class[@name='MyClass']/constructor[@name='MyClass' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
[Register (".ctor", "(Ljava/lang/String;)V", "")]
 unsafe MyClass (string? p0)
	: base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
{
	const string __id = "(Ljava/lang/String;)V";

	if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
		return;

	IntPtr native_p0 = JNIEnv.NewString (p0);
	try {
		JniArgumentValue* __args = stackalloc JniArgumentValue [1];
		__args [0] = new JniArgumentValue (native_p0);
		var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
		SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
		_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
	} finally {
		JNIEnv.DeleteLocalRef (native_p0);
	}
}

