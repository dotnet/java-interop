// Metadata.xml XPath interface reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent.Child']"
[Register ("com/xamarin/android/Parent$Child", "", "Com.Xamarin.Android.IParentChildInvoker")]
public partial interface IParentChild : IJavaObject, IJavaPeerable {

	int Bar {
		// Metadata.xml XPath method reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent.Child']/method[@name='getBar' and count(parameter)=0]"
		[Register ("getBar", "()I", "GetGetBarHandler:Com.Xamarin.Android.IParentChildInvoker, MyAssembly")] get;
	}

}

[global::Android.Runtime.Register ("com/xamarin/android/Parent$Child", DoNotGenerateAcw=true)]
internal partial class IParentChildInvoker : global::Java.Lang.Object, IParentChild {

	static readonly JniPeerMembers _members = new XAPeerMembers ("com/xamarin/android/Parent$Child", typeof (IParentChildInvoker));

	static IntPtr java_class_ref {
		get { return _members.JniPeerType.PeerReference.Handle; }
	}

	public override global::Java.Interop.JniPeerMembers JniPeerMembers {
		get { return _members; }
	}

	protected override IntPtr ThresholdClass {
		get { return class_ref; }
	}

	protected override global::System.Type ThresholdType {
		get { return _members.ManagedPeerType; }
	}

	new IntPtr class_ref;

	public static IParentChild GetObject (IntPtr handle, JniHandleOwnership transfer)
	{
		return global::Java.Lang.Object.GetObject<IParentChild> (handle, transfer);
	}

	static IntPtr Validate (IntPtr handle)
	{
		if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
			throw new InvalidCastException (string.Format ("Unable to convert instance of type '{0}' to type '{1}'.",
						JNIEnv.GetClassNameFromInstance (handle), "com.xamarin.android.Parent.Child"));
		return handle;
	}

	protected override void Dispose (bool disposing)
	{
		if (this.class_ref != IntPtr.Zero)
			JNIEnv.DeleteGlobalRef (this.class_ref);
		this.class_ref = IntPtr.Zero;
		base.Dispose (disposing);
	}

	public IParentChildInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
	{
		IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
		this.class_ref = JNIEnv.NewGlobalRef (local_ref);
		JNIEnv.DeleteLocalRef (local_ref);
	}

	static Delegate cb_getBar;
#pragma warning disable 0169
	static Delegate GetGetBarHandler ()
	{
		if (cb_getBar == null)
			cb_getBar = JNINativeWrapper.CreateDelegate ((Func<IntPtr, IntPtr, int>) n_GetBar);
		return cb_getBar;
	}

	static int n_GetBar (IntPtr jnienv, IntPtr native__this)
	{
		Com.Xamarin.Android.IParentChild __this = global::Java.Lang.Object.GetObject<Com.Xamarin.Android.IParentChild> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
		return __this.Bar;
	}
#pragma warning restore 0169

	IntPtr id_getBar;
	public unsafe int Bar {
		get {
			if (id_getBar == IntPtr.Zero)
				id_getBar = JNIEnv.GetMethodID (class_ref, "getBar", "()I");
			return JNIEnv.CallIntMethod (((global::Java.Lang.Object) this).Handle, id_getBar);
		}
	}

}


// Metadata.xml XPath interface reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']"
[Register ("com/xamarin/android/Parent", "", "Com.Xamarin.Android.IParentInvoker")]
public partial interface IParent : IJavaObject, IJavaPeerable {

	int Bar {
		// Metadata.xml XPath method reference: path="/api/package[@name='com.xamarin.android']/interface[@name='Parent']/method[@name='getBar' and count(parameter)=0]"
		[Register ("getBar", "()I", "GetGetBarHandler:Com.Xamarin.Android.IParentInvoker, MyAssembly")] get;
	}

}

[global::Android.Runtime.Register ("com/xamarin/android/Parent", DoNotGenerateAcw=true)]
internal partial class IParentInvoker : global::Java.Lang.Object, IParent {

	static readonly JniPeerMembers _members = new XAPeerMembers ("com/xamarin/android/Parent", typeof (IParentInvoker));

	static IntPtr java_class_ref {
		get { return _members.JniPeerType.PeerReference.Handle; }
	}

	public override global::Java.Interop.JniPeerMembers JniPeerMembers {
		get { return _members; }
	}

	protected override IntPtr ThresholdClass {
		get { return class_ref; }
	}

	protected override global::System.Type ThresholdType {
		get { return _members.ManagedPeerType; }
	}

	new IntPtr class_ref;

	public static IParent GetObject (IntPtr handle, JniHandleOwnership transfer)
	{
		return global::Java.Lang.Object.GetObject<IParent> (handle, transfer);
	}

	static IntPtr Validate (IntPtr handle)
	{
		if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
			throw new InvalidCastException (string.Format ("Unable to convert instance of type '{0}' to type '{1}'.",
						JNIEnv.GetClassNameFromInstance (handle), "com.xamarin.android.Parent"));
		return handle;
	}

	protected override void Dispose (bool disposing)
	{
		if (this.class_ref != IntPtr.Zero)
			JNIEnv.DeleteGlobalRef (this.class_ref);
		this.class_ref = IntPtr.Zero;
		base.Dispose (disposing);
	}

	public IParentInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
	{
		IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
		this.class_ref = JNIEnv.NewGlobalRef (local_ref);
		JNIEnv.DeleteLocalRef (local_ref);
	}

	static Delegate cb_getBar;
#pragma warning disable 0169
	static Delegate GetGetBarHandler ()
	{
		if (cb_getBar == null)
			cb_getBar = JNINativeWrapper.CreateDelegate ((Func<IntPtr, IntPtr, int>) n_GetBar);
		return cb_getBar;
	}

	static int n_GetBar (IntPtr jnienv, IntPtr native__this)
	{
		Com.Xamarin.Android.IParent __this = global::Java.Lang.Object.GetObject<Com.Xamarin.Android.IParent> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
		return __this.Bar;
	}
#pragma warning restore 0169

	IntPtr id_getBar;
	public unsafe int Bar {
		get {
			if (id_getBar == IntPtr.Zero)
				id_getBar = JNIEnv.GetMethodID (class_ref, "getBar", "()I");
			return JNIEnv.CallIntMethod (((global::Java.Lang.Object) this).Handle, id_getBar);
		}
	}

}

