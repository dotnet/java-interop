static IntPtr id_get_AbstractCount;
static IntPtr id_set_AbstractCount_I;
public override unsafe int AbstractCount {
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='get_AbstractCount' and count(parameter)=0]"
	[Register ("get_AbstractCount", "()I", "Getget_AbstractCountHandler")]
	get {
		if (id_get_AbstractCount == IntPtr.Zero)
			id_get_AbstractCount = JNIEnv.GetMethodID (class_ref, "get_AbstractCount", "()I");
		try {
			return JNIEnv.CallIntMethod (((global::Java.Lang.Object) this).Handle, id_get_AbstractCount);
		} finally {
		}
	}
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='set_AbstractCount' and count(parameter)=1 and parameter[1][@type='int']]"
	[Register ("set_AbstractCount", "(I)V", "Getset_AbstractCount_IHandler")]
	set {
		if (id_set_AbstractCount_I == IntPtr.Zero)
			id_set_AbstractCount_I = JNIEnv.GetMethodID (class_ref, "set_AbstractCount", "(I)V");
		try {
			JValue* __args = stackalloc JValue [1];
			__args [0] = new JValue (value);
			JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_set_AbstractCount_I, __args);
		} finally {
		}
	}
}

static IntPtr id_AbstractMethod;
// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='AbstractMethod' and count(parameter)=0]"
[Register ("AbstractMethod", "()V", "GetAbstractMethodHandler")]
public override unsafe void AbstractMethod ()
{
	if (id_AbstractMethod == IntPtr.Zero)
		id_AbstractMethod = JNIEnv.GetMethodID (class_ref, "AbstractMethod", "()V");
	try {
		JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_AbstractMethod);
	} finally {
	}
}

