static Delegate cb_get_Count;
#pragma warning disable 0169
static Delegate Getget_CountHandler ()
{
	if (cb_get_Count == null)
		cb_get_Count = JNINativeWrapper.CreateDelegate ((Func<IntPtr, IntPtr, int>) n_get_Count);
	return cb_get_Count;
}

static int n_get_Count (IntPtr jnienv, IntPtr native__this)
{
	java.code.MyClass __this = global::Java.Lang.Object.GetObject<java.code.MyClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
	return __this.Count;
}
#pragma warning restore 0169

static Delegate cb_set_Count_I;
#pragma warning disable 0169
static Delegate Getset_Count_IHandler ()
{
	if (cb_set_Count_I == null)
		cb_set_Count_I = JNINativeWrapper.CreateDelegate ((Action<IntPtr, IntPtr, int>) n_set_Count_I);
	return cb_set_Count_I;
}

static void n_set_Count_I (IntPtr jnienv, IntPtr native__this, int value)
{
	java.code.MyClass __this = global::Java.Lang.Object.GetObject<java.code.MyClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
	__this.Count = value;
}
#pragma warning restore 0169

static IntPtr id_get_Count;
static IntPtr id_set_Count_I;
public virtual unsafe int Count {
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='get_Count' and count(parameter)=0]"
	[Register ("get_Count", "()I", "Getget_CountHandler")]
	get {
		if (id_get_Count == IntPtr.Zero)
			id_get_Count = JNIEnv.GetMethodID (class_ref, "get_Count", "()I");
		try {

			if (((object) this).GetType () == ThresholdType)
				return JNIEnv.CallIntMethod (((global::Java.Lang.Object) this).Handle, id_get_Count);
			else
				return JNIEnv.CallNonvirtualIntMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "get_Count", "()I"));
		} finally {
		}
	}
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='set_Count' and count(parameter)=1 and parameter[1][@type='int']]"
	[Register ("set_Count", "(I)V", "Getset_Count_IHandler")]
	set {
		if (id_set_Count_I == IntPtr.Zero)
			id_set_Count_I = JNIEnv.GetMethodID (class_ref, "set_Count", "(I)V");
		try {
			JValue* __args = stackalloc JValue [1];
			__args [0] = new JValue (value);

			if (((object) this).GetType () == ThresholdType)
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_set_Count_I, __args);
			else
				JNIEnv.CallNonvirtualVoidMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "set_Count", "(I)V"), __args);
		} finally {
		}
	}
}

static Delegate cb_get_Key;
#pragma warning disable 0169
static Delegate Getget_KeyHandler ()
{
	if (cb_get_Key == null)
		cb_get_Key = JNINativeWrapper.CreateDelegate ((Func<IntPtr, IntPtr, IntPtr>) n_get_Key);
	return cb_get_Key;
}

static IntPtr n_get_Key (IntPtr jnienv, IntPtr native__this)
{
	java.code.MyClass __this = global::Java.Lang.Object.GetObject<java.code.MyClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
	return JNIEnv.NewString (__this.Key);
}
#pragma warning restore 0169

static Delegate cb_set_Key_Ljava_lang_String_;
#pragma warning disable 0169
static Delegate Getset_Key_Ljava_lang_String_Handler ()
{
	if (cb_set_Key_Ljava_lang_String_ == null)
		cb_set_Key_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate ((Action<IntPtr, IntPtr, IntPtr>) n_set_Key_Ljava_lang_String_);
	return cb_set_Key_Ljava_lang_String_;
}

static void n_set_Key_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_value)
{
	java.code.MyClass __this = global::Java.Lang.Object.GetObject<java.code.MyClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
	string value = JNIEnv.GetString (native_value, JniHandleOwnership.DoNotTransfer);
	__this.Key = value;
}
#pragma warning restore 0169

static IntPtr id_get_Key;
static IntPtr id_set_Key_Ljava_lang_String_;
public virtual unsafe string Key {
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='get_Key' and count(parameter)=0]"
	[Register ("get_Key", "()Ljava/lang/String;", "Getget_KeyHandler")]
	get {
		if (id_get_Key == IntPtr.Zero)
			id_get_Key = JNIEnv.GetMethodID (class_ref, "get_Key", "()Ljava/lang/String;");
		try {

			if (((object) this).GetType () == ThresholdType)
				return JNIEnv.GetString (JNIEnv.CallObjectMethod (((global::Java.Lang.Object) this).Handle, id_get_Key), JniHandleOwnership.TransferLocalRef);
			else
				return JNIEnv.GetString (JNIEnv.CallNonvirtualObjectMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "get_Key", "()Ljava/lang/String;")), JniHandleOwnership.TransferLocalRef);
		} finally {
		}
	}
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='set_Key' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
	[Register ("set_Key", "(Ljava/lang/String;)V", "Getset_Key_Ljava_lang_String_Handler")]
	set {
		if (id_set_Key_Ljava_lang_String_ == IntPtr.Zero)
			id_set_Key_Ljava_lang_String_ = JNIEnv.GetMethodID (class_ref, "set_Key", "(Ljava/lang/String;)V");
		IntPtr native_value = JNIEnv.NewString (value);
		try {
			JValue* __args = stackalloc JValue [1];
			__args [0] = new JValue (native_value);

			if (((object) this).GetType () == ThresholdType)
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_set_Key_Ljava_lang_String_, __args);
			else
				JNIEnv.CallNonvirtualVoidMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "set_Key", "(Ljava/lang/String;)V"), __args);
		} finally {
			JNIEnv.DeleteLocalRef (native_value);
		}
	}
}

static IntPtr id_get_StaticCount;
static IntPtr id_set_StaticCount_I;
public static unsafe int StaticCount {
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='get_StaticCount' and count(parameter)=0]"
	[Register ("get_StaticCount", "()I", "")]
	get {
		if (id_get_StaticCount == IntPtr.Zero)
			id_get_StaticCount = JNIEnv.GetStaticMethodID (class_ref, "get_StaticCount", "()I");
		try {
			return JNIEnv.CallStaticIntMethod  (class_ref, id_get_StaticCount);
		} finally {
		}
	}
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='set_StaticCount' and count(parameter)=1 and parameter[1][@type='int']]"
	[Register ("set_StaticCount", "(I)V", "")]
	set {
		if (id_set_StaticCount_I == IntPtr.Zero)
			id_set_StaticCount_I = JNIEnv.GetStaticMethodID (class_ref, "set_StaticCount", "(I)V");
		try {
			JValue* __args = stackalloc JValue [1];
			__args [0] = new JValue (value);
			JNIEnv.CallStaticVoidMethod  (class_ref, id_set_StaticCount_I, __args);
		} finally {
		}
	}
}

static Delegate cb_get_AbstractCount;
#pragma warning disable 0169
static Delegate Getget_AbstractCountHandler ()
{
	if (cb_get_AbstractCount == null)
		cb_get_AbstractCount = JNINativeWrapper.CreateDelegate ((Func<IntPtr, IntPtr, int>) n_get_AbstractCount);
	return cb_get_AbstractCount;
}

static int n_get_AbstractCount (IntPtr jnienv, IntPtr native__this)
{
	java.code.MyClass __this = global::Java.Lang.Object.GetObject<java.code.MyClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
	return __this.AbstractCount;
}
#pragma warning restore 0169

static Delegate cb_set_AbstractCount_I;
#pragma warning disable 0169
static Delegate Getset_AbstractCount_IHandler ()
{
	if (cb_set_AbstractCount_I == null)
		cb_set_AbstractCount_I = JNINativeWrapper.CreateDelegate ((Action<IntPtr, IntPtr, int>) n_set_AbstractCount_I);
	return cb_set_AbstractCount_I;
}

static void n_set_AbstractCount_I (IntPtr jnienv, IntPtr native__this, int value)
{
	java.code.MyClass __this = global::Java.Lang.Object.GetObject<java.code.MyClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
	__this.AbstractCount = value;
}
#pragma warning restore 0169

public abstract int AbstractCount {
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='get_AbstractCount' and count(parameter)=0]"
	[Register ("get_AbstractCount", "()I", "Getget_AbstractCountHandler")] get;
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='set_AbstractCount' and count(parameter)=1 and parameter[1][@type='int']]"
	[Register ("set_AbstractCount", "(I)V", "Getset_AbstractCount_IHandler")] set;
}

