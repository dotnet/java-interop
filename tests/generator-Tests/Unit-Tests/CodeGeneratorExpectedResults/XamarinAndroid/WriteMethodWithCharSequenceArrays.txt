// Metadata.xml XPath class reference: path="/api/package[@name='com.example']/class[@name='MyClass']"
[global::Android.Runtime.Register ("com/example/MyClass", DoNotGenerateAcw=true)]
public partial class MyClass : Java.Lang.Object {

	internal static new IntPtr java_class_handle;
	internal static new IntPtr class_ref {
		get {
			return JNIEnv.FindClass ("com/example/MyClass", ref java_class_handle);
		}
	}

	protected override IntPtr ThresholdClass {
		get { return class_ref; }
	}

	protected override global::System.Type ThresholdType {
		get { return typeof (MyClass); }
	}

	protected MyClass (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer) {}

	static Delegate cb_echo_arrayLjava_lang_CharSequence_;
#pragma warning disable 0169
	static Delegate GetEcho_arrayLjava_lang_CharSequence_Handler ()
	{
		if (cb_echo_arrayLjava_lang_CharSequence_ == null)
			cb_echo_arrayLjava_lang_CharSequence_ = JNINativeWrapper.CreateDelegate ((_JniMarshal_PPL_L) n_Echo_arrayLjava_lang_CharSequence_);
		return cb_echo_arrayLjava_lang_CharSequence_;
	}

	static IntPtr n_Echo_arrayLjava_lang_CharSequence_ (IntPtr jnienv, IntPtr native__this, IntPtr native_messages)
	{
		var __this = global::Java.Lang.Object.GetObject<Com.Example.MyClass> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
		var messages = (Java.Lang.ICharSequence[]) JNIEnv.GetArray (native_messages, JniHandleOwnership.DoNotTransfer, typeof (Java.Lang.ICharSequence));
		IntPtr __ret = JNIEnv.NewArray (__this.EchoFormatted (messages));
		if (messages != null)
			JNIEnv.CopyArray (messages, native_messages);
		return __ret;
	}
#pragma warning restore 0169

	static IntPtr id_echo_arrayLjava_lang_CharSequence_;
	// Metadata.xml XPath method reference: path="/api/package[@name='com.example']/class[@name='MyClass']/method[@name='echo' and count(parameter)=1 and parameter[1][@type='java.lang.CharSequence[]']]"
	[Register ("echo", "([Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;", "GetEcho_arrayLjava_lang_CharSequence_Handler")]
	public virtual unsafe Java.Lang.ICharSequence[] EchoFormatted (Java.Lang.ICharSequence[] messages)
	{
		if (id_echo_arrayLjava_lang_CharSequence_ == IntPtr.Zero)
			id_echo_arrayLjava_lang_CharSequence_ = JNIEnv.GetMethodID (class_ref, "echo", "([Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
		IntPtr native_messages = JNIEnv.NewArray (messages);
		try {
			JValue* __args = stackalloc JValue [1];
			__args [0] = new JValue (native_messages);

			Java.Lang.ICharSequence[] __ret;
			if (((object) this).GetType () == ThresholdType)
				__ret = (Java.Lang.ICharSequence[]) JNIEnv.GetArray (JNIEnv.CallObjectMethod (((global::Java.Lang.Object) this).Handle, id_echo_arrayLjava_lang_CharSequence_, __args), JniHandleOwnership.TransferLocalRef, typeof (Java.Lang.ICharSequence));
			else
				__ret = (Java.Lang.ICharSequence[]) JNIEnv.GetArray (JNIEnv.CallNonvirtualObjectMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "echo", "([Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;"), __args), JniHandleOwnership.TransferLocalRef, typeof (Java.Lang.ICharSequence));
			return __ret;
		} finally {
			if (messages != null) {
				JNIEnv.CopyArray (native_messages, messages);
				JNIEnv.DeleteLocalRef (native_messages);
			}
		}
	}

	public string[] Echo (string[] messages)
	{
		var jlca_messages = CharSequence.ArrayFromStringArray(messages);
		Java.Lang.ICharSequence[] __result = EchoFormatted (jlca_messages);
		var __rsval = CharSequence.ArrayToStringArray (__result);
		if (jlca_messages != null) foreach (var s in jlca_messages) s?.Dispose ();
		return __rsval;
	}

}
