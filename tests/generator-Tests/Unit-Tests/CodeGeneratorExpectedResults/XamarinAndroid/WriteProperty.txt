static Delegate cb_get_MyProperty;
#pragma warning disable 0169
static Delegate Getget_MyPropertyHandler ()
{
	if (cb_get_MyProperty == null)
		cb_get_MyProperty = JNINativeWrapper.CreateDelegate ((Func<IntPtr, IntPtr, int>) n_get_MyProperty);
	return cb_get_MyProperty;
}

static int n_get_MyProperty (IntPtr jnienv, IntPtr native__this)
{
	com.mypackage.foo __this = global::Java.Lang.Object.GetObject<com.mypackage.foo> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
	return __this.MyProperty;
}
#pragma warning restore 0169

static Delegate cb_set_MyProperty_I;
#pragma warning disable 0169
static Delegate Getset_MyProperty_IHandler ()
{
	if (cb_set_MyProperty_I == null)
		cb_set_MyProperty_I = JNINativeWrapper.CreateDelegate ((Action<IntPtr, IntPtr, int>) n_set_MyProperty_I);
	return cb_set_MyProperty_I;
}

static void n_set_MyProperty_I (IntPtr jnienv, IntPtr native__this, int value)
{
	com.mypackage.foo __this = global::Java.Lang.Object.GetObject<com.mypackage.foo> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
	__this.MyProperty = value;
}
#pragma warning restore 0169

static IntPtr id_get_MyProperty;
static IntPtr id_set_MyProperty_I;
public virtual unsafe int MyProperty {
	// Metadata.xml XPath method reference: path="/api/package[@name='com.mypackage']/class[@name='foo']/method[@name='get_MyProperty' and count(parameter)=0]"
	[Register ("get_MyProperty", "()I", "Getget_MyPropertyHandler")]
	get {
		if (id_get_MyProperty == IntPtr.Zero)
			id_get_MyProperty = JNIEnv.GetMethodID (class_ref, "get_MyProperty", "()I");
		try {

			if (((object) this).GetType () == ThresholdType)
				return JNIEnv.CallIntMethod (((global::Java.Lang.Object) this).Handle, id_get_MyProperty);
			else
				return JNIEnv.CallNonvirtualIntMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "get_MyProperty", "()I"));
		} finally {
		}
	}
	// Metadata.xml XPath method reference: path="/api/package[@name='com.mypackage']/class[@name='foo']/method[@name='set_MyProperty' and count(parameter)=1 and parameter[1][@type='int']]"
	[Register ("set_MyProperty", "(I)V", "Getset_MyProperty_IHandler")]
	set {
		if (id_set_MyProperty_I == IntPtr.Zero)
			id_set_MyProperty_I = JNIEnv.GetMethodID (class_ref, "set_MyProperty", "(I)V");
		try {
			JValue* __args = stackalloc JValue [1];
			__args [0] = new JValue (value);

			if (((object) this).GetType () == ThresholdType)
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_set_MyProperty_I, __args);
			else
				JNIEnv.CallNonvirtualVoidMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "set_MyProperty", "(I)V"), __args);
		} finally {
		}
	}
}

