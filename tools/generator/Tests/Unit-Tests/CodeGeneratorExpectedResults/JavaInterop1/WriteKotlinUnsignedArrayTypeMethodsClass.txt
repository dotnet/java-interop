// Metadata.xml XPath class reference: path="/api/package[@name='java.code']/class[@name='MyClass']"
[global::Android.Runtime.Register ("java/code/MyClass", DoNotGenerateAcw=true)]
public partial class MyClass  {

	static readonly JniPeerMembers _members = new JniPeerMembers ("java/code/MyClass", typeof (MyClass));
	internal static new IntPtr class_ref {
		get {
			return _members.JniPeerType.PeerReference.Handle;
		}
	}

	protected MyClass (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer) {}

	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='Echo' and count(parameter)=1 and parameter[1][@type='uint[]']]"
	[Register ("Echo", "([I)[I", "")]
	public unsafe uint[] Echo (uint[] value)
	{
		const string __id = "Echo.([I)[I";
		IntPtr native_value = JNIEnv.NewArray ((int[])(object)value);
		try {
			JniArgumentValue* __args = stackalloc JniArgumentValue [1];
			__args [0] = new JniArgumentValue (native_value);
			var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
			return (uint[]) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (uint));
		} finally {
			if (value != null) {
				JNIEnv.CopyArray (native_value, value);
				JNIEnv.DeleteLocalRef (native_value);
			}
		}
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='Echo' and count(parameter)=1 and parameter[1][@type='ushort[]']]"
	[Register ("Echo", "([S)[S", "")]
	public unsafe ushort[] Echo (ushort[] value)
	{
		const string __id = "Echo.([S)[S";
		IntPtr native_value = JNIEnv.NewArray ((short[])(object)value);
		try {
			JniArgumentValue* __args = stackalloc JniArgumentValue [1];
			__args [0] = new JniArgumentValue (native_value);
			var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
			return (ushort[]) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (ushort));
		} finally {
			if (value != null) {
				JNIEnv.CopyArray (native_value, value);
				JNIEnv.DeleteLocalRef (native_value);
			}
		}
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='Echo' and count(parameter)=1 and parameter[1][@type='ulong[]']]"
	[Register ("Echo", "([J)[J", "")]
	public unsafe ulong[] Echo (ulong[] value)
	{
		const string __id = "Echo.([J)[J";
		IntPtr native_value = JNIEnv.NewArray ((long[])(object)value);
		try {
			JniArgumentValue* __args = stackalloc JniArgumentValue [1];
			__args [0] = new JniArgumentValue (native_value);
			var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
			return (ulong[]) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (ulong));
		} finally {
			if (value != null) {
				JNIEnv.CopyArray (native_value, value);
				JNIEnv.DeleteLocalRef (native_value);
			}
		}
	}

	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/class[@name='MyClass']/method[@name='Echo' and count(parameter)=1 and parameter[1][@type='ubyte[]']]"
	[Register ("Echo", "([B)[B", "")]
	public unsafe byte[] Echo (byte[] value)
	{
		const string __id = "Echo.([B)[B";
		IntPtr native_value = JNIEnv.NewArray (value);
		try {
			JniArgumentValue* __args = stackalloc JniArgumentValue [1];
			__args [0] = new JniArgumentValue (native_value);
			var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
			return (byte[]) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
		} finally {
			if (value != null) {
				JNIEnv.CopyArray (native_value, value);
				JNIEnv.DeleteLocalRef (native_value);
			}
		}
	}

}
