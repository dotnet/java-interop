// Metadata.xml XPath interface reference: path="/api/package[@name='java.code']/interface[@name='IMyInterface']"
[Register ("java/code/IMyInterface", "", "java.code.IMyInterfaceInvoker")]
public partial interface IMyInterface : IJavaObject {
	new static IntPtr class_ref = JNIEnv.FindClass ("java/code/IMyInterface");

	static Delegate cb_DoSomething;
#pragma warning disable 0169
	static Delegate GetDoSomethingHandler ()
	{
		if (cb_DoSomething == null)
			cb_DoSomething = JNINativeWrapper.CreateDelegate ((Action<IntPtr, IntPtr>) n_DoSomething);
		return cb_DoSomething;
	}

	static void n_DoSomething (IntPtr jnienv, IntPtr native__this)
	{
		java.code.IMyInterface __this = global::Java.Lang.Object.GetObject<java.code.IMyInterface> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
		__this.DoSomething ();
	}
#pragma warning restore 0169

	static IntPtr id_DoSomething;
	// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/interface[@name='IMyInterface']/method[@name='DoSomething' and count(parameter)=0]"
	[Register ("DoSomething", "()V", "GetDoSomethingHandler:java.code.IMyInterface, MyAssembly")]
	 virtual unsafe void DoSomething ()
	{
		if (id_DoSomething == IntPtr.Zero)
			id_DoSomething = JNIEnv.GetMethodID (class_ref, "DoSomething", "()V");
		try {

			if (((object) this).GetType () == ThresholdType)
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_DoSomething);
			else
				JNIEnv.CallNonvirtualVoidMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "DoSomething", "()V"));
		} finally {
		}
	}

}

