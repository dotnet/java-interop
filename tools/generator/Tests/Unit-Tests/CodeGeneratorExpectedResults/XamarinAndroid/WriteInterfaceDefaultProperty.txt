// Metadata.xml XPath interface reference: path="/api/package[@name='java.code']/interface[@name='IMyInterface']"
[Register ("java/code/IMyInterface", "", "java.code.IMyInterfaceInvoker")]
public partial interface IMyInterface : IJavaObject {
	new static IntPtr class_ref = JNIEnv.FindClass ("java/code/IMyInterface");

	static Delegate cb_get_Value;
#pragma warning disable 0169
	static Delegate Getget_ValueHandler ()
	{
		if (cb_get_Value == null)
			cb_get_Value = JNINativeWrapper.CreateDelegate ((Func<IntPtr, IntPtr, int>) n_get_Value);
		return cb_get_Value;
	}

	static int n_get_Value (IntPtr jnienv, IntPtr native__this)
	{
		java.code.IMyInterface __this = global::Java.Lang.Object.GetObject<java.code.IMyInterface> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
		return __this.Value;
	}
#pragma warning restore 0169

	static Delegate cb_set_Value_I;
#pragma warning disable 0169
	static Delegate Getset_Value_IHandler ()
	{
		if (cb_set_Value_I == null)
			cb_set_Value_I = JNINativeWrapper.CreateDelegate ((Action<IntPtr, IntPtr, int>) n_set_Value_I);
		return cb_set_Value_I;
	}

	static void n_set_Value_I (IntPtr jnienv, IntPtr native__this, int value)
	{
		java.code.IMyInterface __this = global::Java.Lang.Object.GetObject<java.code.IMyInterface> (jnienv, native__this, JniHandleOwnership.DoNotTransfer);
		__this.Value = value;
	}
#pragma warning restore 0169

	static IntPtr id_get_Value;
	static IntPtr id_set_Value_I;
	 virtual unsafe int Value {
		// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/interface[@name='IMyInterface']/method[@name='get_Value' and count(parameter)=0]"
		[Register ("get_Value", "()I", "Getget_ValueHandler")]
		get {
			if (id_get_Value == IntPtr.Zero)
				id_get_Value = JNIEnv.GetMethodID (class_ref, "get_Value", "()I");
			try {

				if (((object) this).GetType () == ThresholdType)
					return JNIEnv.CallIntMethod (((global::Java.Lang.Object) this).Handle, id_get_Value);
				else
					return JNIEnv.CallNonvirtualIntMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "get_Value", "()I"));
			} finally {
			}
		}
		// Metadata.xml XPath method reference: path="/api/package[@name='java.code']/interface[@name='IMyInterface']/method[@name='set_Value' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("set_Value", "(I)V", "Getset_Value_IHandler")]
		set {
			if (id_set_Value_I == IntPtr.Zero)
				id_set_Value_I = JNIEnv.GetMethodID (class_ref, "set_Value", "(I)V");
			try {
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue (value);

				if (((object) this).GetType () == ThresholdType)
					JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_set_Value_I, __args);
				else
					JNIEnv.CallNonvirtualVoidMethod (((global::Java.Lang.Object) this).Handle, ThresholdClass, JNIEnv.GetMethodID (ThresholdClass, "set_Value", "(I)V"), __args);
			} finally {
			}
		}
	}

}

